<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 3 尝鲜</title>
      <link href="/2020/05/24/vue3start/"/>
      <url>/2020/05/24/vue3start/</url>
      
        <content type="html"><![CDATA[<p>4 月 16 日，vue 3 正式进入 beta 阶段，终于忍不住尝鲜的心情，今天来尝试一下 Vue 3.0 的新特性。</p><h2 id="创建-Vue-3-项目"><a href="#创建-Vue-3-项目" class="headerlink" title="创建 Vue 3 项目"></a>创建 Vue 3 项目</h2><h4 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h4><pre class=" language-shell"><code class="language-shell">// 安装 vue-clicnpm install -g @vue/cli</code></pre><h4 id="vue-create-创建项目"><a href="#vue-create-创建项目" class="headerlink" title="vue create 创建项目"></a>vue create 创建项目</h4><pre><code>vue create vue3.0</code></pre><p>执行这步时，会有两个选项，我们选择第一个，先创建一个简单的 Vue 初始化项目。</p><img src="/.com//技术文档\博客文档\vue 3.0\vue 3 尝鲜\img\image-setup.png" alt="image-20200425015254882" style="zoom: 80%;"><p>现在我们已经创建了一个 Vue 的初始化项目。我们可以查看根目录下的package.json 文件。</p>{% image F:\技术文档\博客文档\vue 'image-20200425015958250' '3.0\vue' %}<p>可以看到，新建的项目还是 Vue 2.6 版本的。</p><p>还没升级之前的 2.x 版本</p>{% image F:\技术文档\博客文档\vue 'image-20200425010157483' '3.0\vue' %}{% image F:\技术文档\博客文档\vue 'image-20200425010244517' '3.0\vue' %}<h4 id="添加-vue-next-插件"><a href="#添加-vue-next-插件" class="headerlink" title="添加 vue-next 插件"></a>添加 vue-next 插件</h4><p>现在需要安装 vue-next 插件来把 Vue 升级2.6到 3.0beta 版本。</p><pre><code>// 安装完vue/cli以后，可以使用vue add添加插件// 目前3.0对应的是vue-next项目vue add vue-next</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/.com//技术文档\博客文档\vue" alt="image-20200425010435850" title="3.0vue">                </div>                <div class="image-caption">3.0vue</div>            </figure><p>此时已经升级到 vue 3.0 了</p><p>左边目录结构并没有多大变化</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/.com//技术文档\博客文档\vue" alt="image-20200425021223713" title="3.0vue">                </div>                <div class="image-caption">3.0vue</div>            </figure><p>但是 main.js 的语法却和 Vue 2.x 的大不相同。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/.com//技术文档\博客文档\vue" alt="image-20200425010546009" title="3.0vue">                </div>                <div class="image-caption">3.0vue</div>            </figure><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><pre><code>npm run serve</code></pre><p>Vue 3.0 项目搭建完毕！如此简单！</p><img src="/.com//技术文档\博客文档\vue 3.0\vue 3 尝鲜\img\image-run.png" alt="image-20200425011125465" style="zoom:50%;"><h2 id="开始一个小例子"><a href="#开始一个小例子" class="headerlink" title="开始一个小例子"></a>开始一个小例子</h2><p>在 Vue 2.x 中，我们一般在 <code>data</code> 里声明变量，methods 来声明方法。那么在 Vue 3 中呢？</p><p>在Vue3 的 可以使用 composition API 响应式来实现。</p><p>setup是新增的组件选项，相当于在组件内部使用Composition API的入口点。在 setup 方法中，我们可以创建使用新的 api 创建响应式的实例，返回属性和方法给模板渲染。</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <div>{{ count }}</div>  </div></template><script>import { ref } from 'vue'export default {  name: 'App',  setup() {    const count = ref(0)    return {      count    }  }}</script><style>#app {  text-align: center;  color: #2c3e50;  margin-top: 60px;}</style></code></pre><p>其中，ref，可以初始化变量，返回的是一个 <strong>value reference （包装对象）</strong>。一个包装对象只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。</p><p>我们知道，在 Vue 2.x 中，改变数组，必须触发数组的更新机制，使用变更方法，或者替换数组，但在 Vue 3 中，采用了 Proxy 代替了原来的 Object.defineproperty 的形式，所以，直接改变数组某一项，也会生效了。</p><p>我们来试一下改变数组的第一个元素</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <div>count: {{ count }}</div>    <ul>      <li v-for="item in arr" :key="item">{{ item }}</li>    </ul>    <button @click="change">改变</button>  </div></template><script>import { ref } from 'vue'export default {  name: 'App',  setup() {    const count = ref(0)    const arr = ref(['1','2','3'])    const change = () => {      count.value++      arr.value[0] = count.value    }    return {      count, arr, change    }  }}</script><style>#app {  text-align: center;  color: #2c3e50;  margin-top: 60px;}</style></code></pre><p>展示效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/.com//技术文档\博客文档\vue" alt="3.0vue" title>                </div>                <div class="image-caption">3.0vue</div>            </figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>终于开始了Vue 3的探究之旅。Vue 3 和 Vue 2.x的不同， 主要体现在 <code>性能</code>、<code>Tree-shaking support</code> 、<code>Composition API</code> 、 <code>Fragment</code> 、<code>Teleport</code>、<code>Suspense</code> 、<code>TypeScript支持度</code> 和 <code>自定义 Render</code> 上。 更多的新特性还需日后多花时间了解……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue 3 进入 beta 阶段</title>
      <link href="/2020/05/24/vue3beta/"/>
      <url>/2020/05/24/vue3beta/</url>
      
        <content type="html"><![CDATA[<p> 4 月 16 日，vue 3 正式进入 beta 阶段。同日，尤大参加了 State of Vue 的线上活动，以下是他上传到 google docs 上的 slides ： <a href="https://docs.google.com/presentation/d/1LHp-8hEtXEMSE1fd6YLAhYmtndQelQKbWlGggZKe4y8/edit#slide=id.p" target="_blank" rel="noopener">State of Vue Apr 16 2020</a> </p><h2 id="vue-3-核心"><a href="#vue-3-核心" class="headerlink" title="vue 3 核心"></a>vue 3 核心</h2><h4 id="进入-Beta-阶段意味着什么？"><a href="#进入-Beta-阶段意味着什么？" class="headerlink" title="进入 Beta 阶段意味着什么？"></a>进入 Beta 阶段意味着什么？</h4><img src="/.com//img\image-01.png" alt="image-20200419164800870" style="zoom:50%;"><p> 目前，所有被列入计划的 RFCs 已经实现了，接下来 Vue 团队的重点是让 Vue 3 变得更加稳定，以及让 vue 相关的第三方库支持 vue 3。 </p><h4 id="vue-3-0-主要变化："><a href="#vue-3-0-主要变化：" class="headerlink" title="vue 3.0 主要变化："></a>vue 3.0 主要变化：</h4><img src="/.com//img\image-02.png" alt="image-20200419164935241" style="zoom:50%;"><p> 主要体现在 <code>性能</code>、<code>Tree-shaking support</code> 、<code>Composition API</code> 、 <code>Fragment</code> 、<code>Teleport</code>、<code>Suspense</code> 、<code>TypeScript支持度</code> 和 <code>自定义 Render</code> 上。 </p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>​    <img src="/.com//img\image-03.png" alt="image-20200419165018329" style="zoom:50%;"></p><p>重写了Vdom</p><p>编译优化</p><p>更加高效的组件初始化</p><p>性能提升1.2~2x</p><p>服务端渲速度提高2~3x</p><h4 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h4><img src="/.com//img\image-04.png" alt="image-20200419165050967" style="zoom:50%;"><p>​    vue 3 支持 Tree-shaking，从而大大得减少了 vue 的打包体积。 在 2.x 版本中，无论我们使用 Vue 核心中的哪些功能，所有未使用的功能最终都会进入我们的生产代码。而 vue 3  支持 tree-shaking，这意味着如果你不使用它的某些功能（例如<code>transition</code>组件或 v-model指令），则这些功能将不会包含在你的产品包中 。</p><h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><img src="/.com//img\image-05.png" alt="image-20200419165117494" style="zoom:50%;"><p>​      Composition API 类似于 React Hooks。 Vue3.0 将抛弃之前的 Class API 的提案，选择了 Function API。目前，vue 官方 也提供了 Vue3.0 特性的尝鲜版本，前段时间叫 vue-function-api，目前已经改名叫  <a href="https://github.com/vuejs/composition-api" target="_blank" rel="noopener">composition-api</a> </p><h4 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h4><img src="/.com//img\image-06.png" alt="image-20200419165146602" style="zoom:50%;"><p>​    template 模板中不再限制只有一个根节点，可以支持多个根节点 </p><p>​    render函数也可以返回数组</p><p>​    Fragments，即 片段， 类似于 React.Fragments，vue 2 中也有对应的库 <a href="https://github.com/y-nk/vue-fragment" target="_blank" rel="noopener">vue-fragments</a>  。Fragment 看起来像是普通的 DOM 元素，但它是虚拟的，根本不会在 DOM 树中渲染。这样我们就可以将组件功能绑定到单个元素中，而无需创建冗余的 DOM 节点。</p><h4 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h4><img src="/.com//img\image-07.png" alt="image-20200419165231771" style="zoom:50%;"><p>​    Teleport 类似于 react 的 Portal。它可以使我们能够将一些HTML代码传送到组件外部应用程序中的另一个位置。例如，弹窗，通过 Teleport ，可以把弹窗直接挂在到 <code>body</code> 节点上，解决了弹窗被遮挡的问题 。</p><h4 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h4><img src="/.com//img\image-08.png" alt="image-20200419165256976" style="zoom:50%;"><p>​     Suspense 会延迟你的组件渲染，当某个条件触发时才会回调渲染该组件。相当于 slots 的组件。在 <code>Suspended-component</code> 完全渲染前，回调绑定将会一直展现。</p><pre class=" language-vue"><code class="language-vue"><Suspense>  <template >    <Suspended-component />  </template>  <template #fallback>    Loading...  </template></Suspense></code></pre><h4 id="Better-TypeScript-Support"><a href="#Better-TypeScript-Support" class="headerlink" title="Better TypeScript Support"></a>Better TypeScript Support</h4><img src="/.com//img\image-09.png" alt="image-20200419165320225" style="zoom:50%;"><p>​        Vue官方从 2.6.X 版本开始就部分使用Ts重写了，对ts的支持会更加友好。</p><h4 id="Custom-Renderer-API"><a href="#Custom-Renderer-API" class="headerlink" title="Custom Renderer API"></a>Custom Renderer API</h4><img src="/.com//img\image-10.png" alt="image-20200419165435101" style="zoom:50%;"><p>​     可以实现用 DOM一样使用Vue3 来进行 webgl 编程。<a href="https://vugel.planning.nl/#getting-started" target="_blank" rel="noopener">vue-fragments</a></p><h2 id="vue-3-进度"><a href="#vue-3-进度" class="headerlink" title="vue 3 进度"></a>vue 3 进度</h2><img src="/.com//img\image-11.png" alt="image-20200419165628492" style="zoom:50%;"><h4 id="文档和迁移进度"><a href="#文档和迁移进度" class="headerlink" title="文档和迁移进度"></a>文档和迁移进度</h4><img src="/.com//img\image-12.png" alt="image-20200419170042793" style="zoom:50%;"><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><img src="/.com//技术文档\博客文档\vue 3.0\vue 3 进入 beta 阶段\img\image-13.png" alt="image-20200419170145915" style="zoom:50%;"><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><img src="/.com//img\image-14.png" alt="image-20200419170216818" style="zoom:50%;"><h4 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h4><img src="/.com//img\image-15.png" alt="image-20200419170257688" style="zoom:50%;"><h4 id="vue-test-utils"><a href="#vue-test-utils" class="headerlink" title="vue-test-utils"></a>vue-test-utils</h4><img src="/.com//img\image-16.png" alt="image-20200419170334129" style="zoom:50%;"><h4 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h4><img src="/.com//img\image-17.png" alt="image-20200419170440739" style="zoom:50%;"><h4 id="IDE-Support-Vetur"><a href="#IDE-Support-Vetur" class="headerlink" title="IDE Support (Vetur)"></a>IDE Support (Vetur)</h4><img src="/.com//技术文档\博客文档\vue 3.0\vue 3 进入 beta 阶段\img\image-18.png" alt="image-20200419170604316" style="zoom:50%;"><h4 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h4><img src="/.com//技术文档\博客文档\vue 3.0\vue 3 进入 beta 阶段\img\image-19.png" alt="image-20200419170702924" style="zoom:50%;"><h2 id="What-About-2-x"><a href="#What-About-2-x" class="headerlink" title="What About 2.x?"></a>What About 2.x?</h2><img src="/.com//技术文档\博客文档\vue 3.0\vue 3 进入 beta 阶段\img\image-20.png" alt="image-20200419170807183" style="zoom:50%;"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然 vue 3 已经进入 beta 阶段，但是还没有完全完善，一些vue相关的第三方库还没有完全支持。但是，vue 3 必然是一个趋势，随着 vue 3 越来越完善，在使用 vue 2.x 的项目中必然要面临着升级 vue 3 的问题。时时关注 vue 3 的新特性，对以后的开发有很大的帮助……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于列表类开发的列表组件</title>
      <link href="/2020/05/24/angularlist/"/>
      <url>/2020/05/24/angularlist/</url>
      
        <content type="html"><![CDATA[<h2 id="主要实现的功能"><a href="#主要实现的功能" class="headerlink" title="主要实现的功能"></a>主要实现的功能</h2><p>​    排序、分页、过滤、自定义操作列、列表中根据数据展示相应图标、跳转详情页</p>  <p>​    </p><h2 id="组件继承思想"><a href="#组件继承思想" class="headerlink" title="组件继承思想"></a>组件继承思想</h2><p>​    封装一个列表基类，派生类继承该类，复用基类的功能。</p><h5 id="Constructor-构造函数"><a href="#Constructor-构造函数" class="headerlink" title="Constructor 构造函数"></a>Constructor 构造函数</h5><p>​    如果派生类未声明构造函数，它将使用基类的构造函数。这意味着在基类构造函数注入的所有服务，子组件都能访问到。</p><h5 id="生命周期方法不继承"><a href="#生命周期方法不继承" class="headerlink" title="生命周期方法不继承"></a>生命周期方法不继承</h5><p>​    如果基类中包含生命周期钩子，如 <code>ngOnInit</code>、<code>ngOnChanges</code> 等，而在派生类没有定义相应的生命周期钩子，基类的生命周期钩子会被自动调用。如果需要在派生类触发<code>ngOnInit</code>，则需要在派生类上定义相应的生命周期钩子。</p><h5 id="继承的方法和属性基于可访问性级别"><a href="#继承的方法和属性基于可访问性级别" class="headerlink" title="继承的方法和属性基于可访问性级别"></a>继承的方法和属性基于可访问性级别</h5><p>​    派生类不能访问私有方法和属性，仅继承公共方法和属性。</p><h5 id="模板是不能被继承"><a href="#模板是不能被继承" class="headerlink" title="模板是不能被继承"></a>模板是不能被继承</h5><p>​    模板是不能被继承的 ，派生类需自定义模板，因此共享的 DOM 结构或行为需要单独处理。</p><h5 id="元数据和装饰器不继承"><a href="#元数据和装饰器不继承" class="headerlink" title="元数据和装饰器不继承"></a>元数据和装饰器不继承</h5><p>装饰器和元数据（<code>@Component</code>，<code>@Directive</code>，<code>@NgModule</code>等），这些元数据和装饰器不会被派生类继承，但是有一个例外，<code>@Input</code>和<code>@Output</code>装饰器会传递给派生类</p><h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><p>派生类必须通过调用super注入基类的参数</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>application列表组件和基类<code>ResourceListBase</code>、<code>ResourceListWithStatuses</code> 关系</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/.com//技术文档\博客文档\Application功能模块的数据流转和模块关系\img\列表数据分析体系.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>application列表组件主要继承父类<code>ResourceListWithStatuses</code>，通过重写<code>ResourceListWithStatuses</code>的方法，自定义模板，来复用父类的功能属性。</p><h4 id="组件定义"><a href="#组件定义" class="headerlink" title="组件定义"></a>组件定义</h4><h5 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h5><pre class=" language-ts"><code class="language-ts">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  selector<span class="token punctuation">:</span> <span class="token string">'sym-application-list'</span><span class="token punctuation">,</span>  templateUrl<span class="token punctuation">:</span> <span class="token string">'./application.component.html'</span><span class="token punctuation">,</span>  changeDetection<span class="token punctuation">:</span> ChangeDetectionStrategy<span class="token punctuation">.</span>OnPush<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>application.component.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mat-elevation-z8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table-lf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table-content<span class="token punctuation">"</span></span> <span class="token attr-name">content</span> <span class="token attr-name">[hidden]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showZeroState()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table-loading<span class="token punctuation">"</span></span> <span class="token attr-name">kdLoadingSpinner</span> <span class="token attr-name">[isLoading]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isLoading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-table</span> <span class="token attr-name">[dataSource]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getData()<span class="token punctuation">"</span></span> <span class="token attr-name">matSort</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>statusicon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element; let index<span class="token punctuation">=</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-icon</span> <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStatus(element).iconClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showHoverIcon(index, element); else showStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              check_circle            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-template</span> <span class="token attr-name">#showStatus</span><span class="token punctuation">></span></span>              {{getStatus(element).iconName}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-template</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-icon</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span> <span class="token attr-name">mat-sort-header</span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span>          <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goDetail(element)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{element.objectMeta.name}}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>namespace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span> <span class="token attr-name">mat-sort-header</span><span class="token punctuation">></span></span>Namespace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{element.objectMeta.namespace}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>labels<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span><span class="token punctuation">></span></span>Labels<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sym-labels-group</span> <span class="token attr-name">[value]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>element.objectMeta.labels<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sym-labels-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>replicas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span> <span class="token attr-name">mat-sort-header</span><span class="token punctuation">></span></span>Replicas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span>            <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>element.status &amp;&amp; element.status.replicas &amp;&amp; element.status.availableReplicas ;else other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{element.status.availableReplicas}} / {{element.status.replicas}}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-template</span> <span class="token attr-name">#other</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>element.status.replicas &amp;&amp; !element.status.availableReplicas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> / {{element.status.replicas}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!element.status.replicas &amp;&amp; element.status.availableReplicas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              {{element.status.availableReplicas}} / <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span>              <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!element.status.replicas &amp;&amp; !element.status.availableReplicas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              0 / 0            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">matColumnDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>creationTimestamp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span> <span class="token attr-name">mat-sort-header</span><span class="token punctuation">></span></span>Created Time <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{element.status.creationTimestamp}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-container</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let col of getActionColumns()<span class="token punctuation">"</span></span> <span class="token attr-name">[matColumnDef]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-cell</span> <span class="token attr-name">*matHeaderCellDef</span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-cell</span> <span class="token attr-name">*matCellDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kd-dynamic-cell</span> <span class="token attr-name">[component]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col.component<span class="token punctuation">"</span></span> <span class="token attr-name">[resource]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kd-dynamic-cell</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-header-row</span> <span class="token attr-name">*matHeaderRowDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getColumns()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-header-row</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-row</span> <span class="token attr-name">#matrow</span> <span class="token attr-name">(mouseover)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onRowOver(index)<span class="token punctuation">"</span></span> <span class="token attr-name">(mouseleave)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onRowLeave()<span class="token punctuation">"</span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expand(index, row)<span class="token punctuation">"</span></span>        <span class="token attr-name">[ngClass]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>kd-no-bottom-border<span class="token punctuation">'</span>: isRowExpanded(index), <span class="token punctuation">'</span>kd-clickable<span class="token punctuation">'</span>: hasErrors(row)}<span class="token punctuation">"</span></span>        <span class="token attr-name">*matRowDef</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>let row; columns: getColumns(); let index<span class="token punctuation">=</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-row</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mat-paginator</span> <span class="token attr-name">[length]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>totalItems<span class="token punctuation">"</span></span> <span class="token attr-name">[pageSize]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span> <span class="token attr-name">[pageSizeOptions]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pageSizeOptions<span class="token punctuation">"</span></span> <span class="token attr-name">showFirstLastButtons</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mat-paginator</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">content</span> <span class="token attr-name">[hidden]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!showZeroState()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kd-list-zero-state</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kd-list-zero-state</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h5 id="继承父类"><a href="#继承父类" class="headerlink" title="继承父类"></a>继承父类</h5><p>list.ts  基类定义</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> DataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/cdk/collections'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  ChangeDetectorRef<span class="token punctuation">,</span>  ComponentFactoryResolver<span class="token punctuation">,</span>  EventEmitter<span class="token punctuation">,</span>  Inject<span class="token punctuation">,</span>  Input<span class="token punctuation">,</span>  OnDestroy<span class="token punctuation">,</span>  OnInit<span class="token punctuation">,</span>  AfterViewInit<span class="token punctuation">,</span>  Output<span class="token punctuation">,</span>  QueryList<span class="token punctuation">,</span>  Type<span class="token punctuation">,</span>  ViewChild<span class="token punctuation">,</span>  ViewChildren<span class="token punctuation">,</span>  ViewContainerRef<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MatPaginator<span class="token punctuation">,</span> MatSort<span class="token punctuation">,</span> MatTableDataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/material'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Event as KdEvent<span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> ResourceList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@api/symui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  ActionColumn<span class="token punctuation">,</span>  ActionColumnDef<span class="token punctuation">,</span>  ColumnWhenCallback<span class="token punctuation">,</span>  ColumnWhenCondition<span class="token punctuation">,</span>  OnListChangeEvent<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@api/symui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Subject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> ObservableInput <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/observable/merge'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> startWith<span class="token punctuation">,</span> switchMap<span class="token punctuation">,</span> takeUntil <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// import { SEARCH_QUERY_STATE_PARAM } from '../params/params';</span><span class="token keyword">import</span> <span class="token punctuation">{</span> KdStateService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@service/global/state.service'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> LocaltionService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@service/global/localtion.service'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CardListFilterComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../components/list/filter/filter.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NotificationsService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@service/global/notifications.service'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> GlobalServicesModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@service/global/global.module'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RowDetailComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../components/list/rowdetail/rowdetail.component'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@service/global/config.service'</span><span class="token punctuation">;</span><span class="token keyword">export</span> abstract <span class="token keyword">class</span> <span class="token class-name">ResourceListBase</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">ResourceList</span><span class="token punctuation">,</span> R <span class="token keyword">extends</span> <span class="token class-name">Resource</span><span class="token operator">></span>  <span class="token keyword">implements</span> <span class="token class-name">OnInit</span><span class="token punctuation">,</span> OnDestroy<span class="token punctuation">,</span> AfterViewInit <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Base properties</span>  <span class="token keyword">private</span> readonly actionColumns_<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>ActionColumnDef<span class="token operator">&lt;</span>ActionColumn<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> readonly data_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatTableDataSource</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> listUpdates_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> unsubscribe_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> loaded_ <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> readonly dynamicColumns_<span class="token punctuation">:</span> ColumnWhenCondition<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// private paramsService_: ParamsService;</span>  <span class="token keyword">private</span> router_<span class="token punctuation">:</span> Router<span class="token punctuation">;</span>  <span class="token keyword">protected</span> readonly kdState_<span class="token punctuation">:</span> KdStateService<span class="token punctuation">;</span>  <span class="token keyword">protected</span> readonly settingsService_<span class="token punctuation">:</span> ConfigService<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// protected readonly namespaceService_: NamespaceService;</span>  <span class="token keyword">protected</span> readonly localtionService_<span class="token punctuation">:</span> LocaltionService<span class="token punctuation">;</span>  isLoading <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  totalItems <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">get</span> <span class="token function">itemsPerPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>settingsService_<span class="token punctuation">.</span><span class="token function">getItemsPerPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @<span class="token function">Output</span><span class="token punctuation">(</span><span class="token string">'onchange'</span><span class="token punctuation">)</span> onChange<span class="token punctuation">:</span> EventEmitter<span class="token operator">&lt;</span>OnListChangeEvent<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> groupId<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> hideable <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> id<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Data select properties</span>  @<span class="token function">ViewChild</span><span class="token punctuation">(</span>MatSort<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">private</span> readonly matSort_<span class="token punctuation">:</span> MatSort<span class="token punctuation">;</span>  @<span class="token function">ViewChild</span><span class="token punctuation">(</span>MatPaginator<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">private</span> readonly matPaginator_<span class="token punctuation">:</span> MatPaginator<span class="token punctuation">;</span>  @<span class="token function">ViewChild</span><span class="token punctuation">(</span>CardListFilterComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> readonly cardFilter_<span class="token punctuation">:</span> CardListFilterComponent<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> readonly stateName_<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token keyword">private</span> readonly notifications_<span class="token punctuation">:</span> NotificationsService<span class="token punctuation">,</span>    <span class="token keyword">private</span> readonly cdr_<span class="token punctuation">:</span> ChangeDetectorRef<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// this.settingsService_ = GlobalServicesModule.injector.get(GlobalSettingsService);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>kdState_ <span class="token operator">=</span> GlobalServicesModule<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>KdStateService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this.namespaceService_ = GlobalServicesModule.injector.get(NamespaceService);</span>    <span class="token comment" spellcheck="true">// this.paramsService_ = GlobalServicesModule.injector.get(ParamsService);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router_ <span class="token operator">=</span> GlobalServicesModule<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>localtionService_ <span class="token operator">=</span> GlobalServicesModule<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>LocaltionService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>settingsService_ <span class="token operator">=</span> GlobalServicesModule<span class="token punctuation">.</span>injector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>ConfigService<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'ID is a required attribute of list component.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if (this.matPaginator_ === undefined) {</span>    <span class="token comment" spellcheck="true">//   throw Error('MatPaginator has to be defined on a table.');</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// this.namespaceService_.onNamespaceChangeEvent.subscribe(() => {</span>    <span class="token comment" spellcheck="true">//   this.isLoading = true;</span>    <span class="token comment" spellcheck="true">//   this.listUpdates_.next();</span>    <span class="token comment" spellcheck="true">// });</span>    <span class="token comment" spellcheck="true">// this.paramsService_.onParamChange.subscribe(() => {</span>    <span class="token comment" spellcheck="true">//   this.isLoading = true;</span>    <span class="token comment" spellcheck="true">//   this.listUpdates_.next();</span>    <span class="token comment" spellcheck="true">// });</span>  <span class="token punctuation">}</span>  <span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>sort <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>paginator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matPaginator_<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 表格搜索</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">.</span>filterEvent<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> filterValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>filter <span class="token operator">=</span> filterValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">ngOnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe_<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe_<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getDetailsHref</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> namespace<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stateName_ <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kdState_<span class="token punctuation">.</span><span class="token function">href</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stateName_<span class="token punctuation">,</span> resourceName<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>localtionService_<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>project <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> namespace<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      cluster<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localtionService_<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cluster    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> DataSource<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getObservableWithDataSelect_</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>        <span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cdr_<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cdr_<span class="token punctuation">.</span><span class="token function">markForCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cdr_<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 暂时去掉排序分页参数</span>          <span class="token comment" spellcheck="true">// return this.getResourceObservable(this.getDataSelectParams_());</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResourceObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unsubscribe_<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>notifications_<span class="token punctuation">.</span><span class="token function">pushErrors</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalItems <span class="token operator">=</span> data<span class="token punctuation">.</span>listMeta<span class="token punctuation">.</span>totalItems<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isLoading <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loaded_ <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onListChange_</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cdr_<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>cdr_<span class="token punctuation">.</span><span class="token function">detectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">showZeroState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalItems <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isLoading<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hideable <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filtered_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showZeroState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> displayColumns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDisplayColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> actionColumns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actionColumns_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>col <span class="token operator">=</span><span class="token operator">></span> col<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> condition of <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicColumns_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">whenCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> afterColIdx <span class="token operator">=</span> displayColumns<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>afterCol<span class="token punctuation">)</span><span class="token punctuation">;</span>        displayColumns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>afterColIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> condition<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> displayColumns<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>actionColumns<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getActionColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>ActionColumnDef<span class="token operator">&lt;</span>ActionColumn<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actionColumns_<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shouldShowColumn</span><span class="token punctuation">(</span>dynamicColName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> col <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicColumns_<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>condition <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> condition<span class="token punctuation">.</span>col <span class="token operator">===</span> dynamicColName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>col <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> col<span class="token punctuation">.</span><span class="token function">whenCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> registerActionColumn<span class="token operator">&lt;</span>C <span class="token keyword">extends</span> <span class="token class-name">ActionColumn</span><span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Type<span class="token operator">&lt;</span>C<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>actionColumns_<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`action-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>      component<span class="token punctuation">,</span>    <span class="token punctuation">}</span> as ActionColumnDef<span class="token operator">&lt;</span>ActionColumn<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">registerDynamicColumn</span><span class="token punctuation">(</span>    col<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    afterCol<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    whenCallback<span class="token punctuation">:</span> ColumnWhenCallback<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicColumns_<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      col<span class="token punctuation">,</span>      afterCol<span class="token punctuation">,</span>      whenCallback<span class="token punctuation">,</span>    <span class="token punctuation">}</span> as ColumnWhenCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> getObservableWithDataSelect_<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const obsInput = [this.matPaginator_.page] as Array&lt;ObservableInput&lt;E>>;</span>    <span class="token keyword">const</span> obsInput <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token keyword">Array</span><span class="token operator">&lt;</span>ObservableInput<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 暂时去掉排序请求</span>    <span class="token comment" spellcheck="true">// if (this.matSort_) {</span>    <span class="token comment" spellcheck="true">//   this.matSort_.sortChange.subscribe(() => (this.matPaginator_.pageIndex = 0));</span>    <span class="token comment" spellcheck="true">//   obsInput.push(this.matSort_.sortChange);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// 暂时去掉字段过滤</span>    <span class="token comment" spellcheck="true">// if (this.cardFilter_) {</span>      <span class="token comment" spellcheck="true">// this.cardFilter_.filterEvent.subscribe(() => (this.matPaginator_.pageIndex = 0));</span>      <span class="token comment" spellcheck="true">// obsInput.push(this.cardFilter_.filterEvent);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token operator">...</span>obsInput<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listUpdates_ as Subject<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">getDataSelectParams_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HttpParams <span class="token punctuation">{</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">paginate_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sort_</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter_</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search_</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">sort_</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span> HttpParams<span class="token punctuation">)</span><span class="token punctuation">:</span> HttpParams <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'sortBy'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSortBy_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">paginate_</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span> HttpParams<span class="token punctuation">)</span><span class="token punctuation">:</span> HttpParams <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'itemsPerPage'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemsPerPage<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>matPaginator_<span class="token punctuation">.</span>pageIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">filter_</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span> HttpParams<span class="token punctuation">)</span><span class="token punctuation">:</span> HttpParams <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> filterByQuery <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">.</span>query <span class="token operator">?</span> <span class="token template-string"><span class="token string">`name,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">.</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filterByQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'filterBy'</span><span class="token punctuation">,</span> filterByQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">search_</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span> HttpParams<span class="token punctuation">)</span><span class="token punctuation">:</span> HttpParams <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> filterByQuery <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'filterBy'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router_<span class="token punctuation">.</span>routerState<span class="token punctuation">.</span>snapshot<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// const query = this.paramsService_.getQueryParam(SEARCH_QUERY_STATE_PARAM);</span>      <span class="token comment" spellcheck="true">// if (query) {</span>      <span class="token comment" spellcheck="true">//   if (filterByQuery) {</span>      <span class="token comment" spellcheck="true">//     filterByQuery += ',';</span>      <span class="token comment" spellcheck="true">//   }</span>      <span class="token comment" spellcheck="true">//   filterByQuery += `name,${query}`;</span>      <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filterByQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'filterBy'</span><span class="token punctuation">,</span> filterByQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">filtered_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'filterBy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">getSortBy_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Default values.</span>    <span class="token keyword">let</span> ascending <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> active <span class="token operator">=</span> <span class="token string">'age'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">.</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ascending <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">.</span>direction <span class="token operator">===</span> <span class="token string">'asc'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>      active <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">.</span>active<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">===</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ascending <span class="token operator">=</span> <span class="token operator">!</span>ascending<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ascending <span class="token operator">?</span> <span class="token string">'a'</span> <span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mapToBackendValue_</span><span class="token punctuation">(</span>active<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">mapToBackendValue_</span><span class="token punctuation">(</span>sortByColumnName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sortByColumnName <span class="token operator">===</span> <span class="token string">'age'</span> <span class="token operator">?</span> <span class="token string">'creationTimestamp'</span> <span class="token punctuation">:</span> sortByColumnName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">onListChange_</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> emitValue <span class="token operator">=</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>      groupId<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span>      items<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalItems<span class="token punctuation">,</span>      filtered<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>      resourceList<span class="token punctuation">:</span> data<span class="token punctuation">,</span>    <span class="token punctuation">}</span> as OnListChangeEvent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      emitValue<span class="token punctuation">.</span>filtered <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filtered_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>emitValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> abstract <span class="token function">getDisplayColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  abstract <span class="token function">getResourceObservable</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span> HttpParams<span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>  abstract <span class="token function">map</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> R<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> abstract <span class="token keyword">class</span> <span class="token class-name">ResourceListWithStatuses</span><span class="token operator">&lt;</span>  T <span class="token keyword">extends</span> <span class="token class-name">ResourceList</span><span class="token punctuation">,</span>  R <span class="token keyword">extends</span> <span class="token class-name">Resource</span>  <span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ResourceListBase</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> readonly bindings_<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>hash<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> StateBinding<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  @<span class="token function">ViewChildren</span><span class="token punctuation">(</span><span class="token string">'matrow'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> read<span class="token punctuation">:</span> ViewContainerRef <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> readonly containers_<span class="token punctuation">:</span> QueryList<span class="token operator">&lt;</span>ViewContainerRef<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">private</span> lastHash_<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> readonly unknownStatus<span class="token punctuation">:</span> StatusIcon <span class="token operator">=</span> <span class="token punctuation">{</span>    iconName<span class="token punctuation">:</span> <span class="token string">'help'</span><span class="token punctuation">,</span>    iconClass<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">''</span><span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> icon <span class="token operator">=</span> IconName<span class="token punctuation">;</span>  expandedRow<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>  hoveredRow<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>    stateName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    <span class="token keyword">private</span> readonly notifications<span class="token punctuation">:</span> NotificationsService<span class="token punctuation">,</span>    cdr<span class="token punctuation">:</span> ChangeDetectorRef<span class="token punctuation">,</span>    <span class="token keyword">private</span> readonly resolver_<span class="token operator">?</span><span class="token punctuation">:</span> ComponentFactoryResolver<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>stateName<span class="token punctuation">,</span> notifications<span class="token punctuation">,</span> cdr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clearExpandedRows_<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">expand</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> resource<span class="token punctuation">:</span> R<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>containers_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow <span class="token operator">=</span> undefined<span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>containers_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolver_<span class="token punctuation">.</span><span class="token function">resolveComponentFactory</span><span class="token punctuation">(</span>RowDetailComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> component <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">createComponent</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    component<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEvents</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow <span class="token operator">=</span> index<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">,</span> isAsc<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>isAsc <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getStatus</span><span class="token punctuation">(</span>resource<span class="token punctuation">:</span> R<span class="token punctuation">)</span><span class="token punctuation">:</span> StatusIcon <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastHash_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> stateBinding <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bindings_<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastHash_<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stateBinding<span class="token punctuation">.</span><span class="token function">callbackFunction</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStatusObject_</span><span class="token punctuation">(</span>stateBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// map() is needed here to cast hash from string to number. Without it compiler will not</span>    <span class="token comment" spellcheck="true">// recognize stateBinding type.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> hash of Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bindings_<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hashStr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Number</span><span class="token punctuation">(</span>hashStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> stateBinding <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bindings_<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stateBinding<span class="token punctuation">.</span><span class="token function">callbackFunction</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastHash_ <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStatusObject_</span><span class="token punctuation">(</span>stateBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unknownStatus<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isRowExpanded</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow <span class="token operator">===</span> index<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isRowHovered</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hoveredRow <span class="token operator">===</span> index<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">onRowOver</span><span class="token punctuation">(</span>rowIdx<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hoveredRow <span class="token operator">=</span> rowIdx<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">onRowLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hoveredRow <span class="token operator">=</span> undefined<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">showHoverIcon</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> resource<span class="token punctuation">:</span> R<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isRowHovered</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isRowExpanded</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">getEvents</span><span class="token punctuation">(</span>_resource<span class="token punctuation">:</span> R<span class="token punctuation">)</span><span class="token punctuation">:</span> KdEvent<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">hasErrors</span><span class="token punctuation">(</span>_resource<span class="token punctuation">:</span> R<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">registerBinding</span><span class="token punctuation">(</span>    iconName<span class="token punctuation">:</span> IconName<span class="token punctuation">,</span>    iconClass<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    callbackFunction<span class="token punctuation">:</span> StatusCheckCallback<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>iconName<span class="token punctuation">)</span><span class="token punctuation">,</span> iconClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bindings_<span class="token punctuation">[</span>icon<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> icon<span class="token punctuation">,</span> callbackFunction <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">clearExpandedRows_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> containers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>containers_<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> containers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>expandedRow <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">getStatusObject_</span><span class="token punctuation">(</span>stateBinding<span class="token punctuation">:</span> StateBinding<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> StatusIcon <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      iconName<span class="token punctuation">:</span> stateBinding<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      iconClass<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>stateBinding<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>cssClass<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">StatusIcon</span> <span class="token punctuation">{</span>  iconName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  iconClass<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>className<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> IconName <span class="token punctuation">{</span>  error <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">,</span>  timelapse <span class="token operator">=</span> <span class="token string">'timelapse'</span><span class="token punctuation">,</span>  checkCircle <span class="token operator">=</span> <span class="token string">'check_circle'</span><span class="token punctuation">,</span>  help <span class="token operator">=</span> <span class="token string">'help'</span><span class="token punctuation">,</span>  warning <span class="token operator">=</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>  none <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Icon</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  cssClass<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> cssClass<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cssClass <span class="token operator">=</span> cssClass<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Implementation of djb2 hash function:   * http://www.cse.yorku.ca/~oz/hash.html   */</span>  <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>cssClass<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>prev <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> prev <span class="token operator">+</span> curr<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5381</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>type StatusCheckCallback<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>resource<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">StateBinding</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  icon<span class="token punctuation">:</span> Icon<span class="token punctuation">;</span>  callbackFunction<span class="token punctuation">:</span> StatusCheckCallback<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>application.component.ts</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationListComponent</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceListWithStatuses</span><span class="token operator">&lt;</span>ApplicationList<span class="token punctuation">,</span> Application<span class="token operator">></span> <span class="token punctuation">{</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> endpoint <span class="token operator">=</span> EndpointManager<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span>application<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> showMetrics <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> initialized<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  @<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> deployment<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  cumulativeMetrics<span class="token punctuation">:</span> Metric<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  pageSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  pageSizeOptions<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  namespace<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  nsList<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> router<span class="token punctuation">:</span> Router<span class="token punctuation">,</span>    <span class="token keyword">private</span> readonly application_<span class="token punctuation">:</span> NamespacedResourceService<span class="token operator">&lt;</span>ApplicationList<span class="token operator">></span><span class="token punctuation">,</span>    resolver<span class="token punctuation">:</span> ComponentFactoryResolver<span class="token punctuation">,</span>    notifications<span class="token punctuation">:</span> NotificationsService<span class="token punctuation">,</span>    cdr<span class="token punctuation">:</span> ChangeDetectorRef<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'application'</span><span class="token punctuation">,</span> notifications<span class="token punctuation">,</span> cdr<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> ListIdentifier<span class="token punctuation">.</span>application<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>groupId <span class="token operator">=</span> ListGroupIdentifier<span class="token punctuation">.</span>workloads<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Register status icon handlers</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBinding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>checkCircle<span class="token punctuation">,</span> <span class="token string">'kd-success'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isInSuccessState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBinding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>error<span class="token punctuation">,</span> <span class="token string">'kd-error'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isInErrorState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Register action columns.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>registerActionColumn<span class="token operator">&lt;</span>MenuComponent<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'menu'</span><span class="token punctuation">,</span> MenuComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span></code></pre><h5 id="重写父类方法"><a href="#重写父类方法" class="headerlink" title="重写父类方法"></a>重写父类方法</h5><p>通过继承基类<code>ResourceListWithStatuses</code>，可以复用其基本的功能属性，同时可以定义属性和方法扩展列表组件的功能，实现这个列表组件主要的是如果<strong>调用组件方法发起请求，获取到数据</strong></p><ul><li><p>重写<code>getResourceObservable</code> 方法，该方法主要是返回一个Observable，进行异步编程。</p><p>在这个方法里，可以请求多个api，使用Observable.forkJoin，可以合并多个Observable，返回一个Observable。</p></li><li><p>结合<code>sym-select</code> 组件搜索</p></li></ul><p>  <code>sym-select</code>组件的namespace下拉列表的数据nsList是异步获取的，如果是选择是的namespace是ALL，那么列表组件要获取到nsList，然后对每个nsList里的namespace进行全部请求。如果选择的是某个namesapce，那么就传入namespace的值，进行单个请求</p><p>  <strong>这里也是比较疑惑的地方</strong>，之前想通过<code>@Input</code>传入属性的方式，来把搜索组件的数据传递给applicaiton列表组件<code>sym-application-list</code></p><p>  <img src="/.com//F:%5C%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%5C%E5%8D%9A%E5%AE%A2%E6%96%87%E6%A1%A3%5CApplication%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E5%92%8C%E6%A8%A1%E5%9D%97%E5%85%B3%E7%B3%BB%5Cimg%5Cinput.png" alt></p><p>  但是尝试之后，发现在页面初始化的时候，通过<code>@Input</code>的属性传入的<code>nsList</code>为空的。如果传入的属性是同步获取的，则可以传递到application列表组件中</p><p>  最后获取搜索参数的方式，采取<strong>服务依赖注入</strong>的方式来获取。</p><p>  <img src="/.com//F:%5C%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%5C%E5%8D%9A%E5%AE%A2%E6%96%87%E6%A1%A3%5CApplication%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E5%92%8C%E6%A8%A1%E5%9D%97%E5%85%B3%E7%B3%BB%5Cimg%5Csubscribe.png" alt></p><ul><li>通过重写map 方法，在自定义表格的数据，返回所需表格的数据。</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>sortingDataAccessor <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> item<span class="token punctuation">.</span>objectMeta<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'creationTimestamp'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> item<span class="token punctuation">.</span>status<span class="token punctuation">.</span>creationTimestamp<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'namespace'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> item<span class="token punctuation">.</span>objectMeta<span class="token punctuation">.</span>namespace<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">return</span> item<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getResourceObservable</span><span class="token punctuation">(</span>params<span class="token operator">?</span><span class="token punctuation">:</span> HttpParams<span class="token punctuation">)</span><span class="token punctuation">:</span> Observable<span class="token operator">&lt;</span>ApplicationList<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localtionService_<span class="token punctuation">.</span>onNamespaceUpdate<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localtionService_<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>namespace<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nsList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localtionService_<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>namespaceList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      items<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      listMeta<span class="token punctuation">:</span> <span class="token punctuation">{</span>        totalItems<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">===</span> <span class="token string">'ALL'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nsList<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> observableList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ns<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>application_<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpoint<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> ns<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>observableList <span class="token operator">&amp;&amp;</span> observableList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        Observable<span class="token punctuation">.</span><span class="token function">forkJoin</span><span class="token punctuation">(</span>observableList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span>items <span class="token operator">=</span> item<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              v<span class="token punctuation">.</span>objectMeta<span class="token punctuation">.</span>namespace <span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>              <span class="token keyword">return</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span>items <span class="token operator">=</span> data<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span>listMeta<span class="token punctuation">.</span>totalItems <span class="token operator">+</span><span class="token operator">=</span> item<span class="token punctuation">.</span>listMeta<span class="token punctuation">.</span>totalItems<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>application_<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpoint<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namespace<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">map</span><span class="token punctuation">(</span>applicationList<span class="token punctuation">:</span> ApplicationList<span class="token punctuation">)</span><span class="token punctuation">:</span> Application<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">!==</span> <span class="token string">'ALL'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      applicationList<span class="token punctuation">.</span>items <span class="token operator">=</span> applicationList<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>objectMeta<span class="token punctuation">.</span>namespace <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namespace<span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'applicationList'</span><span class="token punctuation">,</span> applicationList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> applicationList<span class="token punctuation">.</span>items<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isInErrorState</span><span class="token punctuation">(</span>resource<span class="token punctuation">:</span> Application<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> resource<span class="token punctuation">.</span>status <span class="token operator">?</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span>status<span class="token punctuation">.</span>replicas <span class="token operator">&amp;&amp;</span> resource<span class="token punctuation">.</span>status<span class="token punctuation">.</span>replicas <span class="token operator">!==</span> resource<span class="token punctuation">.</span>status<span class="token punctuation">.</span>availableReplicas <span class="token operator">?</span>       <span class="token keyword">true</span> <span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">isInSuccessState</span><span class="token punctuation">(</span>resource<span class="token punctuation">:</span> Application<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> resource<span class="token punctuation">.</span>status <span class="token operator">?</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span>status<span class="token punctuation">.</span>replicas <span class="token operator">&amp;&amp;</span> resource<span class="token punctuation">.</span>status<span class="token punctuation">.</span>replicas <span class="token operator">===</span> resource<span class="token punctuation">.</span>status<span class="token punctuation">.</span>availableReplicas <span class="token operator">?</span>       <span class="token keyword">true</span> <span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token function">getDisplayColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'statusicon'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'namespace'</span><span class="token punctuation">,</span> <span class="token string">'labels'</span><span class="token punctuation">,</span> <span class="token string">'replicas'</span><span class="token punctuation">,</span> <span class="token string">'creationTimestamp'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h4 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sym-application-list</span> <span class="token attr-name">#applicationList</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sym-application-list</span><span class="token punctuation">></span></span></code></pre><p>初始化时，调用getList请求方法</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">this</span><span class="token punctuation">.</span>applicationList<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="公共组件的巧妙之处"><a href="#公共组件的巧妙之处" class="headerlink" title="公共组件的巧妙之处"></a>公共组件的巧妙之处</h2><h5 id="actionColumn-操作列可以自定义"><a href="#actionColumn-操作列可以自定义" class="headerlink" title="actionColumn 操作列可以自定义"></a>actionColumn 操作列可以自定义</h5><p>在基类中已有声明注册操作列的方法，在application列表组件继承该方法，在构造函数中，注册操作列，<code>MenuComponent</code>是引入的组件</p><pre><code>this.registerActionColumn&lt;MenuComponent&gt;(&#39;menu&#39;, MenuComponent);</code></pre><h5 id="过滤功能"><a href="#过滤功能" class="headerlink" title="过滤功能"></a>过滤功能</h5>{% asset_img image-20200430184348308 This is an example image %}<p>这里的Pods列表组件也是继承了<code>ResourceListWithStatuses</code></p><p>继承的组件都会继承过滤功能，因为继承的组件的模板是自定义的，可以在模板上引入过滤的组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kd-card-list-filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kd-card-list-filter</span><span class="token punctuation">></span></span></code></pre><p>基类中以判断是否有过滤组件，并订阅过滤组件的方法触发列表过滤</p><pre class=" language-ts"><code class="language-ts"><span class="token function">ngAfterViewInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>sort <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matSort_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>paginator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matPaginator_<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 表格搜索</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">.</span>filterEvent<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> filterValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cardFilter_<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data_<span class="token punctuation">.</span>filter <span class="token operator">=</span> filterValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​    通过继承一些列表组件或者基类，可以大大地提升组件功能的复用率，并且能够提高开发效率。在一些业务场景中，我们总会面临着，多处一样的代码，如果有变动，就要全部更改，这样不利于代码的简洁，而且代码逻辑相对单一。由此我们要学会封装一些常用性的组件，来达到代码的复用率，加强代码的健壮性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular 新建页面流程</title>
      <link href="/2020/05/24/angularcreatenew/"/>
      <url>/2020/05/24/angularcreatenew/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一个月前，接手了一个angular框架的项目。接下来，不得不把angular的中文文档从头到尾啃一遍。在这过程中，我也把一些在开发中遇到的问题整理下来。</p><h2 id="目录概览"><a href="#目录概览" class="headerlink" title="目录概览"></a>目录概览</h2><pre><code>.src    // 项目源码目录    ├── app     // 应用的组件、模块    │   ├── app.component.spec.ts    │   ├── app.component.ts    // 根组件    │   ├── app.module.ts       // 根模块    │   ├── app-routing.module.ts   // 根路由    │   ├── chrome      // 菜单路由模块，左边菜单，头部导航栏    │   ├── common      // 公共目录，存放公共模块组件、全局services    │   ├── core.module.ts      // 全局核心模块    │   ├── custom.module.ts    // 自定义模块    │   ├── logs                // 日志模块    │   ├── monitor             // 监控模块    │   ├── overview    │   ├── region-and-cluster.d.ts            │   ├── region-and-cluster.json     // region和cluster的自定义数据    │   ├── region-and-cluster-test.json        │   ├── resource    // 主要页面模块    │   ├── shared.module.ts    │   └── typings     // 全局typescript类型声明    ├── assets          // 资源目录，存储静态资源的,比如图片    │   ├── baseui    │   └── images    ├── _dark.scss    ├── environments    // 环境配置，比如开发、测试、生产环境做不同配置    │   ├── environment.prod.ts    │   ├── environment.ts    │   └── version.ts    ├── favicon.ico     // 网站标志图标    ├── index.html      // 整个应用的根html，程序启动就是访问这个页面    ├── index.scss    ├── _light.scss    ├── main.ts         // 项目入口，通过这个文件来启动项目    ├── _mixins.scss    ├── polyfills.ts    // 主要是用来导入一些必要库, 兼容老版本    ├── styles.scss     // 全局的样式文件    ├── test.ts         // 自动化测试使用    ├── _theming.scss    ├── tree.txt    └── _variables.scss</code></pre><p>新建的页面主要流程，主要是在src/app/resource目录中创建对应模块，然后模块中创建对应的组件，如果组件中需创建公共组件，则在src/app/common中创建。</p><p>下面以新建<strong>网络配置信息概览subnet列表页</strong>为例，介绍新建页面的流程。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h4 id="创建模块-network"><a href="#创建模块-network" class="headerlink" title="创建模块 network"></a>创建模块 <code>network</code></h4><p>切换到模块目录下，src/app/resource，执行</p><pre class=" language-shell"><code class="language-shell">ng g module network</code></pre><pre class=" language-shell"><code class="language-shell">ng g module network/subnet --routing</code></pre><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件subnet"><a href="#组件subnet" class="headerlink" title="组件subnet"></a>组件<code>subnet</code></h3><h4 id="创建组件subnet"><a href="#创建组件subnet" class="headerlink" title="创建组件subnet"></a>创建组件<code>subnet</code></h4><p>创建模块里的组件<code>subnet</code></p><pre class=" language-shell"><code class="language-shell">ng g component network/subnet/list</code></pre><h4 id="声明组件subnet"><a href="#声明组件subnet" class="headerlink" title="声明组件subnet"></a>声明组件<code>subnet</code></h4><p>src/app/resource/network/subnet/subnet.module.ts</p><pre class=" language-tsx"><code class="language-tsx">import { NgModule } from '@angular/core';import { CommonModule } from '@angular/common';import { SubnetRoutingModule } from './subnet-routing.module';import { SubnetComponent } from './list/list.component';import { SharedModule } from '../../../shared.module';import { ComponentsModule } from '../../../common/components/components.module';import { NavModule } from '../../../chrome/nav/nav.module';@NgModule({  declarations: [SubnetComponent],  imports: [    CommonModule,    SharedModule,    ComponentsModule,    SubnetRoutingModule,    NavModule,  ]})export class SubnetModule { }</code></pre><h4 id="添加到路由"><a href="#添加到路由" class="headerlink" title="添加到路由"></a>添加到路由</h4><p>src/app/chrome/chrome-routing.module.ts</p><pre class=" language-tsx"><code class="language-tsx">// Network group{    path: 'network',    loadChildren: '../resource/network/network.module#NetworkModule',},{    path: 'subnet',    loadChildren: '../resource/network/subnet/subnet.module#SubnetModule',},</code></pre><p>src/app/chrome/nav/nav.component.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kd-nav-item</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kd-nav-group-item<span class="token punctuation">"</span></span> <span class="token attr-name">state</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/network<span class="token punctuation">"</span></span> <span class="token attr-name">i18n</span><span class="token punctuation">></span></span>Network Config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kd-nav-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kd-nav-item</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kd-nav-item<span class="token punctuation">"</span></span> <span class="token attr-name">state</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/subnet<span class="token punctuation">"</span></span> <span class="token attr-name">i18n</span><span class="token punctuation">></span></span>Subnet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kd-nav-item</span><span class="token punctuation">></span></span></code></pre><h4 id="创建公共列表组件"><a href="#创建公共列表组件" class="headerlink" title="创建公共列表组件"></a>创建公共列表组件</h4><p>组件<code>subnet</code> 需创建其对应的列表组件</p><p>切换到公共列表组件目录下，src/app/common/components/resourcelists，执行</p><pre><code>ng g component subnet</code></pre><h3 id="公共列表组件组件"><a href="#公共列表组件组件" class="headerlink" title="公共列表组件组件"></a>公共列表组件组件</h3><h4 id="声明公共列表组件组件"><a href="#声明公共列表组件组件" class="headerlink" title="声明公共列表组件组件"></a>声明公共列表组件组件</h4><p>在/src/app/common/components/components.module.ts里</p><pre class=" language-tsx"><code class="language-tsx">import { SubnetListComponent } from './resourcelists/subnet/subnet.component';</code></pre><pre class=" language-tsx"><code class="language-tsx">@NgModule({  imports: [SharedModule],  declarations: [...components, ScaleEditDefaultActionbar, ActionbarDetailScaleComponent, NavComponent, ExecComponent, EndpontsComponent, SubnetListComponent],  exports: [...components],  entryComponents: [ChipDialog, RowDetailComponent, MenuComponent]})</code></pre><p>至此，network模块下的subnet组件已新建完成</p><pre><code>├── network│   ├── network.module.ts│   ├── network-routing.module.ts│   └── subnet│       ├── list│       │   ├── list.component.html│       │   ├── list.component.scss│       │   └── list.component.ts│       ├── subnet.module.ts│       └── subnet-routing.module.ts</code></pre><h4 id="列表页使用公共列表组件"><a href="#列表页使用公共列表组件" class="headerlink" title="列表页使用公共列表组件"></a>列表页使用公共列表组件</h4><p>在subnet组件中使用公共列表组件</p><p>src/app/resource/network/subnet/list/list.component.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sym-subnet-list</span> <span class="token attr-name">#subnetList</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sym-subnet-list</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react 搜索组件</title>
      <link href="/2020/04/11/reactsearchcomponent/"/>
      <url>/2020/04/11/reactsearchcomponent/</url>
      
        <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/.com//search.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="主要实现的功能"><a href="#主要实现的功能" class="headerlink" title="主要实现的功能"></a>主要实现的功能</h3><ol><li>​    能够实时搜索，能够手动搜索、清除</li><li>​    能根据不同类型显示各种表单类型，例如：日期、文本框、下拉列表</li><li>​    每个搜索选项，可以根据需要设置单选或多选操作</li></ol><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="构建组件结构"><a href="#构建组件结构" class="headerlink" title="构建组件结构"></a>构建组件结构</h4><p>​        基于ant design 的 Form表单进行开发，主要分为两部分，表单搜索选项和表单搜索、清除按钮，</p><p>​        表单搜索选项，是一些常见的表单选项，如果是一些不常见表单类型，采用自定义表单组件</p><p>​        实时搜索，主要调用了Form表单的 onValuesChange 方法</p><p>配置项：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th><th>是否必填</th><th>默认值</th></tr></thead><tbody><tr><td>formInitialValue</td><td>Array</td><td>初始值</td><td>可选</td><td>无</td></tr><tr><td>filterConfig</td><td>Array</td><td>搜索项字段配置</td><td>必填</td><td>无</td></tr><tr><td>buttonLocation</td><td>String</td><td>按钮位置</td><td>可选</td><td>left</td></tr><tr><td>okButtonStyle</td><td>String</td><td>搜索按钮样式</td><td>可选</td><td>无</td></tr><tr><td>resetButtonStyle</td><td>String</td><td>清除按钮样式</td><td>可选</td><td>无</td></tr><tr><td>onSubmit</td><td>Function</td><td>搜索事件</td><td>可选</td><td>无</td></tr><tr><td>onReset</td><td>Function</td><td>清除事件</td><td>可选</td><td>无</td></tr></tbody></table><p>filterConfig</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th><th>是否必填</th><th>默认值</th></tr></thead><tbody><tr><td>label</td><td>String</td><td>字段 标签</td><td>是</td><td>无</td></tr><tr><td>name</td><td>String</td><td>字段 name</td><td>是</td><td>无</td></tr><tr><td>type</td><td>String</td><td>搜索类型（多选按钮或者单选按钮: Button（默认）、日期: Date、下拉选择: Select、文本框: Text）</td><td></td><td>Button</td></tr><tr><td>options</td><td>Array</td><td>type为 Button、Select 时</td><td>否</td><td>无</td></tr></tbody></table><h4 id="添加反向数据流"><a href="#添加反向数据流" class="headerlink" title="添加反向数据流"></a>添加反向数据流</h4><p>​        Form 会对直接子元素绑定表单功能，即不用去手动绑定，就能获取其数据，但是对于一些自定义表单组件，就要提供 onChange 事件或 trigger 的值同名的事件，在把自定义表单组件的数据传到父组件中去</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p>SearchFilter.tsx</p><pre class=" language-react"><code class="language-react">/** * 搜索组件 * <SearchFilter    filterConfig={this.filterConfig}    onSubmit={this.handleSearch}    onReset={this.handleReset}  />  表单配置项  filterConfig = [    {      label: '备件类型',      name: 'type',      type: 'Button',   // 表单类型 多选按钮或单选按钮：Button（默认）、 日期：Date、 下拉选择：Select、 文本框：Text      mode: 'multiple', // 默认多选    单选为 single      options: [        {          id: '',          label: ''        }      ]    },    {      label: '时间周期',      name: 'date_picker',      type: 'Date'    },  ]; */import React, { Component } from 'react';import { Button, Form, Row, Col, Select, Card, Input } from 'antd';import { FormComponentProps } from 'antd/lib/form/Form';import ChoiceDatePicker from '../ChoiceDatePicker';import ButtonSelect from '../ButtonSelect';import {  filterForm, filterFormItemWithNormal,} from './index.less';const { Option } = Select;export interface ItemProps {  id: string | number;  label: string | number;}export interface SearchFilterValue {  [propName: string]: string | number | any;}export interface FormItem {  label: string;  mode: string;  name: string;  type: string;  options: ItemProps[];}export interface SearchFilterProps extends FormComponentProps{  onSubmit?: (values: SearchFilterValue) => void;  onReset?: () => void;  formInitialValue?: {    [propName: string]: string | number;  };  disableFields?: string[];  filterConfig: FormItem[];  okButtonStyle?: {    [propName: string]: string | number;  };  resetButtonStyle?: {    [propName: string]: string | number;  };  buttonLocation?: 'left' | 'right';}export interface SearchFilterState {}class SearchFilter extends Component<SearchFilterProps, SearchFilterState> {  handleSearch = (e: React.FormEvent<HTMLFormElement>) => {    e.preventDefault();    this.props.form.validateFields((err: any, values: SearchFilterValue) => {      const { onSubmit } = this.props;      const formData = {};      for (let key in values) {        if (values[key] !== undefined) {          if (Array.isArray(values[key])) {            if (values[key].length > 0)              formData[key] = values[key].join(',');          } else {            formData[key] = values[key];          }        }      }      if (onSubmit) onSubmit(formData);    });  };  handleReset = () => {    this.props.form.resetFields();    const { onReset } = this.props;    if (onReset) onReset();  };  isDisabled = (name: string) => {    const { disableFields } = this.props;    return disableFields && disableFields.length>0 && disableFields.includes(name)  };  render() {    const {      form: {getFieldDecorator},      formInitialValue,      filterConfig,      okButtonStyle,      resetButtonStyle,      buttonLocation,    } = this.props;    return (      <>        <Card bordered={false} style={{ marginTop: 24 }}>          <Form className={filterForm} onSubmit={this.handleSearch} labelAlign={"right"} labelCol={{xxl: {span: 1}, xl: {span: 2}, lg: {span: 3}, sm: {span: 3}}} wrapperCol={{span: 20}} style={{textAlign: 'left', marginLeft: -10}}>            {              filterConfig && filterConfig.map(item => {                switch(item.type) {                  case 'Select':                    return <Form.Item label={item.label} key={item.name} className={filterFormItemWithNormal}>                      {getFieldDecorator(item.name, {                        initialValue: formInitialValue ? formInitialValue[item.name] : undefined                      })(                        <Select                          showSearch                          mode={item.mode}                          style={{ width: '100%' }}                          placeholder="请选择"                          disabled={ this.isDisabled(item.name) }                        >                          {item.options && item.options.length > 0 ? item.options.map((valueItem: ItemProps) =>                            (valueItem.label && <Option key={valueItem.id}>{valueItem.label}</Option>)                          ) : undefined}                        </Select>                      )}                    </Form.Item>                    break;                  case 'Text':                    return <Form.Item label={item.label} key={item.name} className={filterFormItemWithNormal}>                      {getFieldDecorator(item.name, {                        initialValue: formInitialValue ? formInitialValue[item.name] : undefined                      })(                        <Input                          allowClear                          disabled={ this.isDisabled(item.name) }                        />                      )}                    </Form.Item>                    break;                  case 'Date':                    return <Form.Item label={item.label} key={item.name} className={filterFormItemWithNormal}>                      {getFieldDecorator(item.name, {                        initialValue: formInitialValue ? formInitialValue[item.name] : undefined                      })(                        <ChoiceDatePicker                          choiceList={['oneMonth', 'halfYear', 'oneYear']}                        />                      )}                    </Form.Item>                    break;                  default:                    // Button                    return <Form.Item label={item.label} key={item.name} className={filterFormItemWithNormal}>                      {getFieldDecorator(item.name, {                        initialValue: formInitialValue ? formInitialValue[item.name] : undefined                      })(                        <ButtonSelect                          formItem={item}                        />                      )}                    </Form.Item>                    break;                }              })            }            <Row>              <Col                span={24}                style={ buttonLocation && buttonLocation === 'right' ? {                  textAlign: 'right',                } : { textAlign: 'left', marginLeft: 10 }}              ><Button type="primary" htmlType="submit" style={okButtonStyle}>搜索</Button>                <Button                  style={Object.assign({                    marginLeft: 8,                  }, resetButtonStyle)}                  onClick={this.handleReset}                >清除</Button></Col>            </Row>          </Form>        </Card>      </>    );  }}let timeout: any;const onValuesChange = (props: SearchFilterProps, changedValues: any, allValues: any) => {  const formData = {};  for (let key in allValues) {    if (allValues[key] !== undefined) {      formData[key] = allValues[key];      if (Array.isArray(allValues[key])) {        if (allValues[key].length > 0)          formData[key] = allValues[key].join(',');      } else {        formData[key] = allValues[key];      }    }  }  if (props.onSubmit) {    if (timeout) {      clearTimeout(timeout);      timeout = null;    }    var debounceChange = function() {      if (props.onSubmit)        props.onSubmit(formData)    };    timeout = setTimeout(debounceChange, 500);  }};export default Form.create<SearchFilterProps>({ name: 'part_filter', onValuesChange: onValuesChange })(SearchFilter);</code></pre><p>ButtonSelect.tsx</p><pre class=" language-react"><code class="language-react">import React, { useState, useEffect } from 'react';import { Button } from 'antd';import {  filterFormItemButton, filterFormItemButtonSelected,} from './index.less';export interface ItemProps {  id: string | number;  label: string | number;}export interface FormItem {  label: string;  mode: string;  name: string;  type: string;  options: ItemProps[];}interface ButtonSelectProps {  value?: any[] | undefined;  onChange?: (values: any) => void;  formItem: FormItem;}// 多选按钮 单选按钮const ButtonSelect = (props: ButtonSelectProps) => {  const { formItem, onChange, value } = props;  const [selected, setSelected] = useState(value ? value : []);  useEffect(() => {    const val = props.value ? props.value : [];    setSelected(val)}, [props.value])  const triggerChange = (changedValue: any[]) => {    if (onChange) {      onChange(changedValue);    }  };  const handleChange = (item: FormItem, value: string | number) => {    let valueList: any[] = [value];    if (selected && selected.includes(value)) {      valueList = selected.filter(v => v !== value);    } else if (selected) {      if (item.mode === 'single') {        valueList = [value];      } else {        valueList = [...selected, value];      }    }    setSelected(valueList);    triggerChange(valueList);  };  return (    <>      {formItem.options && formItem.options.map((valueItem: ItemProps) =>        <Button          key={valueItem.id}          size='small'          type={selected && selected.includes(valueItem.id) ? undefined : 'link'}          className={selected && selected.includes(valueItem.id) ? filterFormItemButtonSelected : filterFormItemButton}          onClick={()=>{handleChange(formItem, valueItem.id)}}        >          {valueItem.label}        </Button>      )}    </>  );};export default ButtonSelect;</code></pre><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>​    因为是实时搜索，特别是文本类型的搜索，每次输入，都会触发请求，为了节省资源，添加了防抖操作。​    </p><h3 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h3><p>​    当搜索项为下拉列表时，如果选项过多，会造成页面卡顿问题，正在解决中…..</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
